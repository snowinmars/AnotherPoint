using AnotherPoint.Common;
using AnotherPoint.Entities;
using System;
using System.Linq;

namespace AnotherPoint.Core
{
	public static class ClassCore
	{
		public static Class Map(Type type)
		{
			Class @class = new Class(type.FullName)
			{
				AccessModifyer = GetAccessModifyer(type),
			};

			SetupGeneric(type, @class);

			SetupFields(type, @class);
			SetupProperties(type, @class);
			SetupCtors(type, @class);

			return @class;
		}

		private static AccessModifyer GetAccessModifyer(Type type)
		{
			AccessModifyer accessModifyer = AccessModifyer.None;

			if (type.IsPublic)
			{
				accessModifyer |= AccessModifyer.Public;
			}

			if (type.IsInternal())
			{
				accessModifyer |= AccessModifyer.Internal;
			}

			if (type.IsPrivate())
			{
				accessModifyer |= AccessModifyer.Private;
			}

			////////

			if (type.IsAbstract)
			{
				accessModifyer |= AccessModifyer.Abstract;
			}

			if (type.IsSealed)
			{
				accessModifyer |= AccessModifyer.Sealed;
			}

			return accessModifyer;
		}

		private static void SetupCtors(Type type, Class @class)
		{
			foreach (var constructorInfo in type.GetConstructors(Constant.AllInstance))
			{
				@class.Ctors.Add(CtorCore.Map(constructorInfo));
			}
		}

		private static void SetupFields(Type type, Class @class)
		{
			foreach (var fieldInfo in type.GetFields(Constant.AllInstance)
														.Where(f => !f.IsAutogenerated()))
			{
				@class.Fields.Add(FieldCore.Map(fieldInfo));
			}
		}

		private static void SetupGeneric(Type type, Class @class)
		{
			@class.Type.IsGeneric = type.IsGenericType;

			foreach (var genericTypeArgument in type.GenericTypeArguments)
			{
				@class.Type.GenericTypes.Add(genericTypeArgument.FullName);
			}
		}

		private static void SetupProperties(Type type, Class @class)
		{
			foreach (var propertyInfo in type.GetProperties(Constant.AllInstance))
			{
				@class.Properties.Add(PropertyCore.Map(propertyInfo));
			}
		}
	}
}