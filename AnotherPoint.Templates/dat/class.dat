@using System.Reflection
@using AnotherPoint.Common
@using AnotherPoint.Common
@using AnotherPoint.Templates
@model Type

@{
	Layout = null;

	string classAccessModificator = Constant.Todo;

	if (Model.IsPublic)
	{
		classAccessModificator = Constant.Public;
	}

	if (Model.IsInternal())
	{
		classAccessModificator = Constant.Internal;
	}

	if (Model.IsPrivate())
	{
		classAccessModificator = Constant.Private;
	}

	////////

	if (Model.IsAbstract)
	{
		classAccessModificator += Constant.Abstract;
	}

	if (Model.IsSealed)
	{
		classAccessModificator += Constant.Sealed;
	}
}

namespace @Model.Namespace
{
	@classAccessModificator class @Model.Name
	{
		@foreach (var field in Model.GetFields(BindingFlags.Public |
												BindingFlags.NonPublic |
												BindingFlags.Instance |
												BindingFlags.ExactBinding)
									.Where(f => !f.IsAutogenerated()))
		{
			WriteLiteral(TemplateRepository.Compile(TemplateType.Field, field));
		}

		@foreach (var property in Model.GetProperties(BindingFlags.Public |
											BindingFlags.NonPublic |
											BindingFlags.Instance |
											BindingFlags.ExactBinding))
		{
			WriteLiteral(TemplateRepository.Compile(TemplateType.Property, property));
		}

		@foreach (var ctor in Model.GetConstructors(BindingFlags.Public |
		                                            BindingFlags.NonPublic |
		                                            BindingFlags.Instance))
		{
			WriteLiteral(TemplateRepository.Compile(TemplateType.Ctor, ctor));
		}

	}
}