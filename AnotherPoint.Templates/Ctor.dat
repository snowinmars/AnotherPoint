@using System.Reflection
@using System.Text
@using AnotherPoint.Common
@model ConstructorInfo

@{
	Layout = null;

	string ctorAccessModificator = Constant.Todo;

	if (Model.IsPublic)
	{
		ctorAccessModificator = Constant.Public;
	}

	if (Model.IsInternal())
	{
		ctorAccessModificator = Constant.Internal;
	}

	if (Model.IsPrivate)
	{
		ctorAccessModificator = Constant.Private;
	}

	if (Model.IsProtected())
	{
		ctorAccessModificator = Constant.Protected;
	}

	if (Model.IsProtectedInternal())
	{
		ctorAccessModificator = Constant.ProtectedInternal;
	}

	////////

	if (Model.IsAbstract)
	{
		ctorAccessModificator += Constant.Abstract;
	}

	////////

	StringBuilder sb = new StringBuilder(128);

	foreach (var parameter in Model.GetParameters())
	{
		sb.Append(parameter.ParameterType.FullName);
		sb.Append(" ");
		sb.Append(parameter.Name);
		sb.Append(", ");
	}

	if (sb.Length > 0)
	{
		sb.Remove(sb.Length - 2, 1);
	}

	////////

	StringBuilder body = new StringBuilder(256);

	IEnumerable<CtorBindAttribute> binds = Model.GetCustomAttributes<CtorBindAttribute>();

	foreach (var bind in binds)
	{
		switch (bind.Settings)
		{
			case CtorBindSettings.Exact:
				body.Append("this.");
				body.Append(bind.Name.FirstLetterToUpper());
				body.Append(" = ");
				body.Append(bind.Name.FirstLetterToLower());
				body.Append(";");
				break;
			case CtorBindSettings.New:
				break;
			default:
				throw new ArgumentOutOfRangeException("bind", bind, "Enum CtorBindSettings is out of range");
		}

		body.AppendLine();
	}
}

@ctorAccessModificator @Model.DeclaringType.Name (@sb.ToString())
{
	@body.ToString();
}